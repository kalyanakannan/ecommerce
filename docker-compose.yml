version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app_container
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    volumes:
      - .:/app
    depends_on:
      - postgres
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             gunicorn ecommerce.wsgi:application --bind 0.0.0.0:8000 --workers 3"
    networks:
      - ecommerce_network

  postgres:
    image: postgres:15
    container_name: postgres_container
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_container
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres
    networks:
      - ecommerce_network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      

volumes:
  postgres_data:
  pgadmin_data:

networks:
  ecommerce_network:
    driver: bridge
